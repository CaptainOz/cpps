// Generated by Bisonc++ V2.4.8 on Sat, 16 Jul 2011 18:47:15 -0700

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
#include "Scope.h"
#include "Tokenizer.h"

// $insert namespace-open
namespace cpps
{

#undef Parser
class Parser: public ParserBase
{
private:
    Tokenizer* m_tokenizer;
    Scope*     m_global;
    Scope*     m_currentScope;

    void error(char const *msg);    // called on (syntax) errors
    int lex( void );                // returns the next token from the
                                    // lexical scanner. 
    void print( void );             // use, e.g., d_token, d_loc

// support functions for parse():
    void executeAction(int ruleNr);
    void errorRecovery( void );
    int lookup(bool recovery);
    void nextToken( void );

public:
    Parser( void );

    int parse( void );
    void exec( const std::string& code );
    void setGlobal( Scope& global );
};


/*****************************************************************************/


inline Parser::Parser( void )
    : m_tokenizer( NULL )
{
}


/*****************************************************************************/


inline void Parser::error(char const *msg)
{
    std::cerr << msg << std::endl;
}


/*****************************************************************************/


inline void Parser::setGlobal( Scope& global )
{
    m_global = &global;
}

// $insert lex

inline void Parser::print()      // use d_token, d_loc
{}

// $insert namespace-close
}

#endif
