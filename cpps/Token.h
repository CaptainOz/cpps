/**
 *
 */

#ifndef __CPPS_TOKEN_H_INCLUDED__
#define __CPPS_TOKEN_H_INCLUDED__

#include <string>
#include <vector>

namespace cpps
{

class Token
{
public:

    //! Enumeration of all possible token types.
    /**
     * @note
     * When updating this enumeration, also update the @c TypeNames array
     * defined in Token.cpp.
     */
    enum Type
    {
    //  Token type          Regex to match          detection   extraction

        // *** Begin Miscelaneous Token Types *** //
        TypeName,        // [a-zA-Z_]\w*
        Identifier,      // \$[a-zA-Z_]\w*          DONE
        StringLiteral,   // (['"]).*?(?<!\\)\1      DONE
        NumericLiteral,  // (?:\d+|\d*\.\d+)d?      DONE
        CommentLine,     // \/\/[^\n]*
        CommentBlock,    // \/\*.*?\*\/
        RegexMatch,      // \/.?(?<!\\)\/
        // *** End Miscelaneous Token Types *** //

        // *** Begin Non-Overloadable Operators *** //
        Scope,           // ::                      DONE
        Semicolon,       // ;
        Colon,           // :
        Comma,           // ,
        LogicalOr,       // \|\|
        LogicalAnd,      // &&
        OpenBrace,       // \{
        CloseBrace,      // \}
        TernaryIf,       // \?
        // *** End Non-Overloadable Operators *** //

        // *** Begin Overloadable Operators *** //
        OpenParen,       // \(                      DONE
        CloseParen,      // \)                      DONE
        OpenBracket,     // \[
        CloseBracket,    // \]
        MemberAccess,    // ->                      DONE
        Plus,            // \+
        Minus,           // -
        Multiply,        // \*
        Divide,          // \/
        Modulo,          // %
        Concat,          // \.                      DONE
        Increment,       // \+\+                    DONE
        Decrement,       // --                      DONE
        LogicalNot,      // !
        Equality,        // ==
        NotEquality,     // !=
        GreaterThan,     // >
        LessThan,        // <
        GreaterEqual,    // >=
        LessEqual,       // <=
        Assign,          // =
        AssignPlus,      // \+=                     DONE
        AssignMinus,     // -=                      DONE
        AssignMultiply,  // \*=                     DONE
        AssignDivide,    // \/=                     DONE
        AssignModulo,    // %=                      DONE
        AssignBitAnd,    // &=                      DONE
        AssignBitXOr,    // \^=                     DONE
        AssignBitOr,     // |=                      DONE
        AssignLeftShift, // <<=                     DONE
        AssignRightShift,// >>=                     DONE
        BitwiseNot,      // ~
        BitwiseAnd,      // &
        BitwiseXOr,      // \^
        BitwiseOr,       // \|
        RighShift,       // >>
        LeftShift,       // <<
        // *** End Overloadable Operators *** //

        // *** Begin Keywords *** //
        Break,           // break
        Case,            // case
        Catch,           // catch
        Class,           // class
        Const,           // const
        Continue,        // continue
        Default,         // default
        Delete,          // delete                  DONE
        Do,              // do
        Else,            // else
        Enum,            // enum
        False,           // false
        For,             // for
        Foreach,         // foreach
        Friend,          // friend
        Function,        // function
        If,              // if
        Include,         // include
        InstanceOf,      // instanceof              DONE
        Namespace,       // namespace
        New,             // new                     DONE
        Null,            // null
        Operator,        // operator
        Private,         // private
        Protected,       // protected
        Public,          // public
        Return,          // return
        SizeOf,          // sizeof                  DONE
        Static,          // static
        Struct,          // struct
        Switch,          // switch
        This,            // this
        Throw,           // throw
        True,            // true
        Try,             // try
        TypeDef,         // typedef
        TypeNameOperator,// typename                DONE
        Union,           // union
        Using,           // using
        While,           // while
        Var,             // var
        // *** End Keywords *** //

        TokenTypeCount
    };

    //! Array of token type-names suitable for human consumption.
    static const char* TypeNames[];

    //! A list of tokens as generated by the Token::tokenize static method.
    typedef std::vector<Token> List;

    static Token::List tokenize( const std::string& code );

private:
    const std::string mTokenStr;
    Token::Type mType;
    const unsigned int mLineNumber;

    static bool _canBeKeyword(
            const std::string& code,
            const int&         pos,
            const std::string& keyword
        );

}; // end class Token

} // end namespace cpps

#endif // __CPPS_TOKEN_H_INCLUDED__

