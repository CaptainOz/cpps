/**
 *
 */

#ifndef __CPPS_TOKEN_H_INCLUDED__
#define __CPPS_TOKEN_H_INCLUDED__

#include <string>
#include <vector>

namespace cpps
{

class Token
{
public:

    //! Enumeration of all possible token types.
    /**
     * @note
     * When updating this enumeration, also update the @c TypeNames array
     * defined in Token.cpp.
     */
    enum Type
    {
    //  Token type          Regex to match          detection   extraction
        TypeName,        // \b[a-zA-Z_]\w*\b
        Identifier,      // \b\$[a-zA-Z_]\w*\b      DONE
        StringLiteral,   // (['"]).*?(?<!\\)\1      DONE
        NumericLiteral,  // \b(?:\d+|\d*\.\d+)d?\b  DONE
        Scope,           // ::                      DONE
        MemberAccess,    // ->                      DONE
        Semicolon,       // ;
        Colon,           // :
        Comma,           // ,
        Plus,            // \+
        Minus,           // -
        Multiply,        // \*
        Divide,          // \/
        Modulo,          // %
        Concat,          // \.                      DONE
        Increment,       // \+\+                    DONE
        Decrement,       // --                      DONE
        OpenParen,       // \(                      DONE
        CloseParen,      // \)                      DONE
        OpenBrace,       // \{
        CloseBrace,      // \}
        OpenBracket,     // \[
        CloseBracket,    // \]
        LogicalNot,      // !
        LogicalOr,       // \|\|
        LogicalAnd,      // &&
        Equality,        // ==
        NotEquality,     // !=
        GreaterThan,     // >
        LessThan,        // <
        GreaterEqual,    // >=
        LessEqual,       // <=
        Assign,          // =
        AssignPlus,      // \+=                     DONE
        AssignMinus,     // -=                      DONE
        AssignMultiply,  // \*=                     DONE
        AssignDivide,    // \/=                     DONE
        AssignModulo,    // %=                      DONE
        AssignBitAnd,    // &=                      DONE
        AssignBitXOr,    // \^=                     DONE
        AssignBitOr,     // |=                      DONE
        AssignLeftShift, // <<=                     DONE
        AssignRightShift,// >>=                     DONE
        BitwiseNot,      // ~
        BitwiseAnd,      // &
        BitwiseXOr,      // \^
        BitwiseOr,       // \|
        TypeNameOperator,// \btypename\b            DONE
        SizeOf,          // \bsizeof\b              DONE
        InstanceOf,      // \binstanceof\b          DONE
        New,             // \bnew\b                 DONE
        Delete,          // \bdelete\b              DONE
        If,
        Else,
        Function,
        While,
        For,
        Const,
        Return,
        Continue,
        Break,
        Namespace,
        Using,
        Include,
        Class,
        Struct,
        Private,
        Public,
        Protected,
        Friend,
        Static,
        TypeDef,
        Enum,
        Union,
        Switch,
        Case,
        Default,
        Do,
        Var,
        RighShift,       // >>
        LeftShift,       // <<
        TernaryIf,       // \?
        CommentLine,     // \/\/[^\n]*
        CommentBlock,    // \/\*.*?\*\/
        RegexMatch,      // \/.?(?<!\\)\/

        TokenTypeCount
    };

    //! Array of token type-names suitable for human consumption.
    static const char* TypeNames[];

    //! A list of tokens as generated by the Token::tokenize static method.
    typedef std::vector<Token> List;

    static Token::List tokenize( const std::string& code );

private:
    const std::string mTokenStr;
    Token::Type mType;
    const unsigned int mLineNumber;

    static bool _canBeKeyword(
            const std::string& code,
            const int&         pos,
            const std::string& keyword
        );

}; // end class Token

} // end namespace cpps

#endif // __CPPS_TOKEN_H_INCLUDED__

