%baseclass-preinclude "Types.h"
%namespace cpps
%stype AbstractSyntaxTree::Node*

%token TypeName
%token Variable
%token StringLiteral
%token NumericLiteral
%token Colon
%token Semicolon
%token Increment
%token Decrement
%token OpenParen
%token CloseParen
%token OpenBracket
%token CloseBracket
%token OpenBrace
%token CloseBrace

%left   Comma
%right  Throw
%right  Assign
        AssignPlus      AssignMinus     AssignConcat
        AssignMultiply  AssignDivide    AssignModulo
        AssignBitAnd    AssignBitXOr    AssignBitOr
        AssignLeftShift AssignRightShift
%right  TernaryIf
%left   LogicalOr
%left   LogicalAnd
%left   BitwiseOr
%left   BitwiseXOr
%left   BitwiseAnd
%left   Equality    NotEquality
%left   LessThan    LessEqual
        GreaterThan GreaterEqual
%left   LeftShift   RightShift
%left   Minus   Plus    Concat
%left   Divide  Multiply    Modulo
%right  PreIncrement    PreDecrement
        UnaryMinus      UnaryPlus
        LogicalNot      BitwiseNot
        TypeCast
        Reference
        SizeOf
        New
        Delete
%left   PostIncrement   PostDecrement
        FunctionCall
        Index
        MemberAccess
        TypeNameOperator
%left   ResolveScope

%%

block
    : // empty
    | block statement
    ;

statement
    : Semicolon
    | exp Semicolon
        {
            m_currentScope->addStatement( $1 );
            $$ = NULL;
        }
    ;

var
    : Variable
        {
            $$ = $1;
        }
    ;

string
    : StringLiteral
        {
            $$ = $1;
        }
    ;

number
    : NumericLiteral
        {
            $$ = $1;
        }
    ;

exp
    : var
    | string
    | number
    | exp Plus exp
        {
            $$ = new nodes::Addition( $1, $3 );
        }
    | exp Minus exp
        {
            $$ = new nodes::Subtraction( $1, $3 );
        }
    | exp Multiply exp
        {
            $$ = new nodes::Multiplication( $1, $3 );
        }
    | exp Divide exp
        {
            $$ = new nodes::Division( $1, $3 );
        }
    | UnaryMinus exp
        {
            $$ = new nodes::Negation( $2 );
        }
    ;
